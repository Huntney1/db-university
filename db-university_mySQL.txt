1. Selezionare tutti gli studenti nati nel 1990 (160)

    1 SELECT * 
    2 FROM `students` 
    3 WHERE YEAR(`date_of_birth`) = '1990';

2. Selezionare tutti i corsi che valgono più di 10 crediti (479)

    1 SELECT * 
    2 FROM `courses` 
    3 WHERE cfu > 10   

3. Selezionare tutti gli studenti che hanno più di 30 anni

    1 SELECT *
    2 FROM `students`
    3 WHERE YEAR(CURDATE()) - YEAR(`date_of_birth`) > 30   
        (# Si può fare anche in modo differenmte[TIMESTAMPDIFF(YEAR, `date_of_birth`, CURDATE()) > 30])

4. Selezionare tutti i corsi del primo semestre del primo anno di un qualsiasi corso di laurea (286)

    1 SELECT * 
    2 FROM `courses` 
    3 WHERE `period` = 'I semestre'
    4 AND `year`= 1

5. Selezionare tutti gli appelli d'esame che avvengono nel pomeriggio (dopo le 14) del 20/06/2020 (21)

    1 SELECT * 
    2 FROM `exams`
    3 WHERE `date` = '2020-06-20'
    4 AND `hour` >= '14:00:00'   
        (# Si può utilizzare queto valore [14])

6. Selezionare tutti i corsi di laurea magistrale (38)

    1 SELECT*
    2 FROM `degrees`
    3 WHERE `level` = 'magistrale'

7. Da quanti dipartimenti è composta l'università? (12)

    1 SELECT COUNT(*) as numero_dipartimenti  
        (# non c'era prima delle correzione [COUNT(*) as numero_dipartimenti])
    2 FROM `departments`

8. Quanti sono gli insegnanti che non hanno un numero di telefono? (50)

    1 SELECT CUNT(*) AS number_teachers  
        (# prima delle correzione non c'era [CUUNT(*) AS number_teachers])
    2 FROM `teachers`
    3 WHERE `phone` IS NULL



[* GROUP BY *]

1. Contare quanti iscritti ci sono stati ogni anno

    1 SELECT COUNT(*) AS 'Num_Iscritti',YEAR(`enrolment_date`) as `year`
    2 FROM `students`
    3 GROUP BY `year`  

2. Contare gli insegnanti che hanno l'ufficio nello stesso edificio

    1 SELECT COUNT(*) AS 'Num_Teacher', `office_address`
    2 FROM `teachers`
    3 GROUP BY `office_address`

3. Calcolare la media dei voti di ogni appello d'esame

    1 SELECT ROUND(AVG(`vote`), 0.5) AS `Media_Voti`, `exam_id` AS `Appello`
        (# Si Può Utilizzare anche [FLOOR(AVG(`vote`) + 0.5)] ristituisce Num_Int al contrario di [ROUND])
    2 FROM `exam_student`
    3 GROUP BY `exam_id`

4. Contare quanti corsi di laurea ci sono per ogni dipartimento (12)

    1 SELECT COUNT(*) AS 'Num_Coursi_Laurea', `department_id`
    2 FROM `degrees`
    3 GROUP BY `department_id`




[* JOIN *]

1. Selezionare tutti gli studenti iscritti al Corso di Laurea in Economia

    1 SELECT `students`.`name`, `students`.`surname`, `degrees`.`name`
    2 FROM `students`
    3 JOIN `degrees`
    4 ON `degrees`.`id` = `students`.`degree_id`
    5 WHERE `degrees`.`name` LIKE 'Corso di Laurea in Economia'
        (# Si Può Utilizzare anche senza [LIKE] [`degrees`.`name` = 'Corso di Laurea in Economia'])

2. Selezionare tutti i Corsi di Laurea Magistrale del Dipartimento di Neuroscienze (7)

    1 SELECT `degrees`.`name`, `departments`.`name`
    2 FROM `degrees`
    3 JOIN `departments`
    4 ON `departments`.`id` = `degrees`.`department_id`
    5 WHERE `departments`.`name` = 'Dipartimento di Neuroscienze'

3. Selezionare tutti i corsi in cui insegna Fulvio Amato (id=44) (11)

    1 SELECT `courses`.`name`, `teachers`.`name`, `teachers`.`surname`, `teachers`.`id`
    2 FROM `courses`
    3 JOIN `course_teacher`
    4 ON `courses`.`id` = `course_id`
    5 JOIN `teachers`
    6 ON `teachers`.`id` = `teacher_id`
    7 WHERE `teachers`.`name` = 'Fulvio'
    8 AND `teachers`.`surname` = 'Amato'

4. Selezionare tutti gli studenti con i dati relativi al corso di laurea a cui sono iscritti e il
   relativo dipartimento, in ordine alfabetico per cognome e nome



5. Selezionare tutti i corsi di laurea con i relativi corsi e insegnanti



6. Selezionare tutti i docenti che insegnano nel Dipartimento di Matematica (54)



7. BONUS: Selezionare per ogni studente quanti tentativi d’esame ha sostenuto per
   superare ciascuno dei suoi esami

